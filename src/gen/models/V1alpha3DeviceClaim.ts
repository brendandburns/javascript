/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.33.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1alpha3DeviceClaimConfiguration } from '../models/V1alpha3DeviceClaimConfiguration.js';
import { V1alpha3DeviceConstraint } from '../models/V1alpha3DeviceConstraint.js';
import { V1alpha3DeviceRequest } from '../models/V1alpha3DeviceRequest.js';
import { HttpFile } from '../http/http.js';

/**
* DeviceClaim defines how to request devices with a ResourceClaim.
*/
export class V1alpha3DeviceClaim {
    /**
    * This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
    */
    'config'?: Array<V1alpha3DeviceClaimConfiguration>;
    /**
    * These constraints must be satisfied by the set of devices that get allocated for the claim.
    */
    'constraints'?: Array<V1alpha3DeviceConstraint>;
    /**
    * Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
    */
    'requests'?: Array<V1alpha3DeviceRequest>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "config",
            "baseName": "config",
            "type": "Array<V1alpha3DeviceClaimConfiguration>",
            "format": ""
        },
        {
            "name": "constraints",
            "baseName": "constraints",
            "type": "Array<V1alpha3DeviceConstraint>",
            "format": ""
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "Array<V1alpha3DeviceRequest>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return V1alpha3DeviceClaim.attributeTypeMap;
    }

    public constructor() {
    }
}
